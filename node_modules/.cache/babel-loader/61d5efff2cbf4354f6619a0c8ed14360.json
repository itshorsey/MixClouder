{"ast":null,"code":"var _jsxFileName = \"/Users/minihorsey/Sites/Personal/MixClouder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MixContainer from \"./components/MixContainer/\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mix = ({\n  name,\n  url\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n    children: name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: url\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 5,\n  columnNumber: 3\n}, this);\n\n_c = Mix;\n\nconst App = () => {\n  _s();\n\n  const [mixes, setMixes] = useState([]);\n  const stations = [\"balamii\", \"CashmereRadio\", \"dazed\", \"hotelradioparis\", \"ntsradio\"];\n  useEffect(didUpdate => {\n    const fetchData = async station => {\n      const response = await fetch(`https://api.mixcloud.com/${station}/cloudcasts/`);\n      const {\n        data\n      } = await response.json();\n      playlist(data);\n      return data;\n    }; // stations.map((station) => fetchData(station));\n\n\n    stations.forEach(station => console.log(fetchData(station)));\n  }, []);\n  console.log(`outer realm:`, mixes);\n\n  const playlist = list => {\n    console.log(`thing: `, list);\n    setMixes(list);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MixContainer, {\n    mixes: mixes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n\n_s(App, \"62cNtn0mEuW0rAzU+PCPuwi+ERw=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Mix\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/minihorsey/Sites/Personal/MixClouder/src/App.js"],"names":["React","useState","useEffect","MixContainer","Mix","name","url","App","mixes","setMixes","stations","didUpdate","fetchData","station","response","fetch","data","json","playlist","forEach","console","log","list"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,4BAAzB;;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,kBACV;AAAA,0BACE;AAAA,cAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,UADF,eAEE;AAAA,cAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,UAFF;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMF,G;;AAON,MAAMG,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMS,QAAQ,GAAG,CACf,SADe,EAEf,eAFe,EAGf,OAHe,EAIf,iBAJe,EAKf,UALe,CAAjB;AAQAR,EAAAA,SAAS,CAAES,SAAD,IAAe;AACvB,UAAMC,SAAS,GAAG,MAAOC,OAAP,IAAmB;AACnC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,4BAA2BF,OAAQ,cADV,CAA5B;AAGA,YAAM;AAAEG,QAAAA;AAAF,UAAW,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACAC,MAAAA,QAAQ,CAACF,IAAD,CAAR;AACA,aAAOA,IAAP;AACD,KAPD,CADuB,CAUvB;;;AACAN,IAAAA,QAAQ,CAACS,OAAT,CAAkBN,OAAD,IAAaO,OAAO,CAACC,GAAR,CAAYT,SAAS,CAACC,OAAD,CAArB,CAA9B;AACD,GAZQ,EAYN,EAZM,CAAT;AAaAO,EAAAA,OAAO,CAACC,GAAR,CAAa,cAAb,EAA4Bb,KAA5B;;AAEA,QAAMU,QAAQ,GAAII,IAAD,IAAU;AACzBF,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAb,EAAuBC,IAAvB;AACAb,IAAAA,QAAQ,CAACa,IAAD,CAAR;AACD,GAHD;;AAKA,sBAAO,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEd;AAArB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA/BD;;GAAMD,G;;MAAAA,G;AAiCN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MixContainer from \"./components/MixContainer/\";\n\nconst Mix = ({ name, url }) => (\n  <div>\n    <h2>{name}</h2>\n    <p>{url}</p>\n  </div>\n);\n\nconst App = () => {\n  const [mixes, setMixes] = useState([]);\n  const stations = [\n    \"balamii\",\n    \"CashmereRadio\",\n    \"dazed\",\n    \"hotelradioparis\",\n    \"ntsradio\",\n  ];\n\n  useEffect((didUpdate) => {\n    const fetchData = async (station) => {\n      const response = await fetch(\n        `https://api.mixcloud.com/${station}/cloudcasts/`\n      );\n      const { data } = await response.json();\n      playlist(data)\n      return data;\n    };\n\n    // stations.map((station) => fetchData(station));\n    stations.forEach((station) => console.log(fetchData(station)));\n  }, []);\n  console.log(`outer realm:`, mixes);\n\n  const playlist = (list) => {\n    console.log(`thing: `, list)\n    setMixes(list)\n  }\n\n  return <MixContainer mixes={mixes} />;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}