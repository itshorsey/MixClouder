{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanhorsman/Sites/Personal/MixClouder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MixContainer from \"./components/MixContainer/\";\nimport { GlobalStyle } from \"./styles\";\nimport Header from \"./components/Header\";\nimport DetailPanel from \"./components/DetailPanel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [stations, setStations] = useState([]);\n  const [selectedMix, setSelectedBook] = useState(null);\n  useEffect(() => {\n    const stationsList = [\"balamii\", \"CashmereRadio\", \"dazed\", \"thelotradio\", \"dublab\", \"worldwidefm\", \"lowlight\", \"know_wave\", \"hotelradioparis\"];\n    const nothanks = [\"techno\", \"hardcore\", \"drone\", \"doom\", \"edm\", \"disco\", \"drill\", \"dance\", \"electronic\", \"droneday\", \"trance\"];\n\n    const fetchData = async station => {\n      const response = await fetch(`https://api.mixcloud.com/${station}/cloudcasts/?limit=100`);\n      let {\n        data,\n        paging\n      } = await response.json();\n      console.log(paging);\n      data = data.filter(d => {\n        let tags = d.tags.map(d => d.name.toLowerCase());\n\n        for (let i = 0; i < nothanks.length; i++) {\n          if (tags.indexOf(nothanks[i]) !== -1) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n      setStations(stations => [...stations, data]);\n    };\n\n    stationsList.map(station => fetchData(station));\n  }, []);\n\n  const pickMix = mix => {\n    setSelectedBook(mix);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MixContainer, {\n      pickMix: pickMix,\n      stations: stations.flat()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), selectedMix && /*#__PURE__*/_jsxDEV(DetailPanel, {\n      mix: selectedMix\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true); // return <h1>Hi</h1>\n};\n\n_s(App, \"M+6V7jg48lYbmQxo1fInxDad92Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jonathanhorsman/Sites/Personal/MixClouder/src/App.js"],"names":["React","useState","useEffect","MixContainer","GlobalStyle","Header","DetailPanel","App","stations","setStations","selectedMix","setSelectedBook","stationsList","nothanks","fetchData","station","response","fetch","data","paging","json","console","log","filter","d","tags","map","name","toLowerCase","i","length","indexOf","pickMix","mix","flat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,WAAD,EAAcC,eAAd,IAAiCV,QAAQ,CAAC,IAAD,CAA/C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,YAAY,GAAG,CACnB,SADmB,EAEnB,eAFmB,EAGnB,OAHmB,EAInB,aAJmB,EAKnB,QALmB,EAMnB,aANmB,EAOnB,UAPmB,EAQnB,WARmB,EASnB,iBATmB,CAArB;AAYA,UAAMC,QAAQ,GAAG,CACf,QADe,EAEf,UAFe,EAGf,OAHe,EAIf,MAJe,EAKf,KALe,EAMf,OANe,EAOf,OAPe,EAQf,OARe,EASf,YATe,EAUf,UAVe,EAWf,QAXe,CAAjB;;AAcA,UAAMC,SAAS,GAAG,MAAOC,OAAP,IAAmB;AACnC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,4BAA2BF,OAAQ,wBADV,CAA5B;AAGA,UAAI;AAAEG,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAmB,MAAMH,QAAQ,CAACI,IAAT,EAA7B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AAEAD,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAL,CAAaC,CAAD,IAAO;AACxB,YAAIC,IAAI,GAAGD,CAAC,CAACC,IAAF,CAAOC,GAAP,CAAYF,CAAD,IAAOA,CAAC,CAACG,IAAF,CAAOC,WAAP,EAAlB,CAAX;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,QAAQ,CAACiB,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAIJ,IAAI,CAACM,OAAL,CAAalB,QAAQ,CAACgB,CAAD,CAArB,MAA8B,CAAC,CAAnC,EAAsC;AACpC,mBAAO,KAAP;AACD;AACF;;AACD,eAAO,IAAP;AACD,OARM,CAAP;AAUApB,MAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcU,IAAd,CAAf,CAAX;AACD,KAlBD;;AAoBAN,IAAAA,YAAY,CAACc,GAAb,CAAkBX,OAAD,IAAaD,SAAS,CAACC,OAAD,CAAvC;AACD,GAhDQ,EAgDN,EAhDM,CAAT;;AAkDA,QAAMiB,OAAO,GAAIC,GAAD,IAAS;AACvBtB,IAAAA,eAAe,CAACsB,GAAD,CAAf;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,YAAD;AAAc,MAAA,OAAO,EAAED,OAAvB;AAAgC,MAAA,QAAQ,EAAExB,QAAQ,CAAC0B,IAAT;AAA1C;AAAA;AAAA;AAAA;AAAA,YAHF,EAIGxB,WAAW,iBAAI,QAAC,WAAD;AAAa,MAAA,GAAG,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA,YAJlB;AAAA,kBADF,CA1DgB,CAkEhB;AACD,CAnED;;GAAMH,G;;KAAAA,G;AAqEN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MixContainer from \"./components/MixContainer/\";\nimport { GlobalStyle } from \"./styles\";\nimport Header from \"./components/Header\";\nimport DetailPanel from \"./components/DetailPanel\";\n\nconst App = () => {\n  const [stations, setStations] = useState([]);\n  const [selectedMix, setSelectedBook] = useState(null);\n\n  useEffect(() => {\n    const stationsList = [\n      \"balamii\",\n      \"CashmereRadio\",\n      \"dazed\",\n      \"thelotradio\",\n      \"dublab\",\n      \"worldwidefm\",\n      \"lowlight\",\n      \"know_wave\",\n      \"hotelradioparis\"\n\n    ];\n    const nothanks = [\n      \"techno\",\n      \"hardcore\",\n      \"drone\",\n      \"doom\",\n      \"edm\",\n      \"disco\",\n      \"drill\",\n      \"dance\",\n      \"electronic\",\n      \"droneday\",\n      \"trance\",\n    ];\n\n    const fetchData = async (station) => {\n      const response = await fetch(\n        `https://api.mixcloud.com/${station}/cloudcasts/?limit=100`\n      );\n      let { data, paging } = await response.json();\n      console.log(paging);\n\n      data = data.filter((d) => {\n        let tags = d.tags.map((d) => d.name.toLowerCase());\n        for (let i = 0; i < nothanks.length; i++) {\n          if (tags.indexOf(nothanks[i]) !== -1) {\n            return false;\n          }\n        }\n        return true;\n      });\n\n      setStations((stations) => [...stations, data]);\n    };\n\n    stationsList.map((station) => fetchData(station));\n  }, []);\n\n  const pickMix = (mix) => {\n    setSelectedBook(mix);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Header />\n      <MixContainer pickMix={pickMix} stations={stations.flat()} />\n      {selectedMix && <DetailPanel mix={selectedMix} />}\n    </>\n  );\n  // return <h1>Hi</h1>\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}